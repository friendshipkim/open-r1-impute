#!/usr/bin/env python3
"""
Simple example of using LLM-as-Judge evaluation for the trained GRPO model.
"""

import os
import sys
sys.path.append(os.path.join(os.path.dirname(__file__), '..'))

from open_r1.llm_judge_evaluator import LLMJudgeEvaluator

def main():
    # Model path from HuggingFace
    model_path = "friendshipkim/Qwen2.5-1.5B-ultrachat-qrm-p16-g8-ts300-lr2e-6-warmup0.05-ps0.2-preps0.0-rho0"
    
    # Set your OpenAI API key
    api_key = os.getenv("OPENAI_API_KEY")
    if not api_key:
        print("Please set your OpenAI API key:")
        print("export OPENAI_API_KEY='your-api-key-here'")
        return
    
    # Example prompts for evaluation
    prompts = [
        "Explain quantum computing in simple terms.",
        "Write a short story about a robot learning to paint.",
        "What are the main differences between machine learning and deep learning?",
        "Design a simple algorithm to find the largest number in a list.",
        "Explain the concept of climate change to a 10-year-old."
    ]
    
    # Example completions (in practice, these would be generated by your model)
    # For demonstration, we'll use placeholder completions
    example_completions = [
        "<think>\nQuantum computing uses quantum bits that can be in multiple states at once, making it much faster than regular computers for certain problems.\n</think>\n<answer>\nQuantum computing is like having a super-fast computer that can solve really hard problems by using the weird properties of tiny particles.\n</answer>",
        
        "<think>\nI need to create a story about a robot learning to paint, showing creativity and learning.\n</think>\n<answer>\nOnce upon a time, there was a robot named Pixel who wanted to learn how to paint. At first, its paintings were just straight lines and perfect circles, but as it practiced, it learned to create beautiful, expressive art.\n</answer>",
        
        "<think>\nMachine learning is a subset of AI, while deep learning is a subset of machine learning using neural networks.\n</think>\n<answer>\nMachine learning is a broad field where computers learn from data, while deep learning specifically uses neural networks with many layers to learn complex patterns.\n</answer>",
        
        "<think>\nI need to design a simple algorithm to find the maximum value in a list.\n</think>\n<answer>\nHere's a simple algorithm:\n1. Start with the first number as the largest\n2. Compare each number with the current largest\n3. Update the largest if you find a bigger number\n4. Return the largest number\n</answer>",
        
        "<think>\nI need to explain climate change in very simple terms that a 10-year-old can understand.\n</think>\n<answer>\nClimate change is like Earth having a fever. When we burn too much fuel, it makes the Earth warmer, which can cause problems like melting ice and changing weather patterns.\n</answer>"
    ]
    
    print("Initializing LLM-as-Judge evaluator...")
    evaluator = LLMJudgeEvaluator(judge_model_name="gpt-4", api_key=api_key)
    
    print("Evaluating completions...")
    results = evaluator.evaluate_completions(
        prompts=prompts,
        completions=example_completions,
        model_name="GRPO-Qwen2.5-1.5B"
    )
    
    print("\nEvaluation Results:")
    print("=" * 60)
    for i, result in enumerate(results):
        print(f"\nPrompt {i+1}: {prompts[i][:50]}...")
        print(f"Score: {result.score:.3f}")
        print(f"Explanation: {result.explanation}")
    
    # Calculate summary statistics
    scores = [r.score for r in results]
    mean_score = sum(scores) / len(scores)
    
    print(f"\nSummary:")
    print(f"Mean Score: {mean_score:.3f}")
    print(f"Score Range: {min(scores):.3f} - {max(scores):.3f}")
    
    # Save results
    evaluator.save_results({
        "model_name": "GRPO-Qwen2.5-1.5B",
        "results": results,
        "summary": {
            "mean_score": mean_score,
            "min_score": min(scores),
            "max_score": max(scores)
        }
    }, "example_llm_judge_results.json")
    
    print("\nResults saved to example_llm_judge_results.json")

if __name__ == "__main__":
    main() 